
Dio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c79  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000839  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000671  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000329  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000286b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	
	H_Led_Init(RED_LED_PIN);
  6c:	8e e1       	ldi	r24, 0x1E	; 30
  6e:	0e 94 43 00 	call	0x86	; 0x86 <H_Led_Init>
	
	H_PushButton_Init();
  72:	0e 94 4a 00 	call	0x94	; 0x94 <H_PushButton_Init>
	u8 x=0;
	
    while (1) 
    {
		x = H_PushButton_Read();
  76:	0e 94 4f 00 	call	0x9e	; 0x9e <H_PushButton_Read>
			x = H_PushButton_Read();
			H_Led_On(RED_LED_PIN);
		}
			H_Led_Off(RED_LED_PIN);
			*/
		if(x==PRESSED)
  7a:	81 11       	cpse	r24, r1
  7c:	fc cf       	rjmp	.-8      	; 0x76 <main+0xa>
		{
			H_Led_Tog(RED_LED_PIN);
  7e:	8e e1       	ldi	r24, 0x1E	; 30
  80:	0e 94 47 00 	call	0x8e	; 0x8e <H_Led_Tog>
  84:	f8 cf       	rjmp	.-16     	; 0x76 <main+0xa>

00000086 <H_Led_Init>:
/*
function to turn the led off
*/
void H_Led_Off(u8 local_u8_Led)
{
	M_Dio_PinWrite(local_u8_Led,LOW);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	0e 94 6d 00 	call	0xda	; 0xda <M_Dio_PinMode>
  8c:	08 95       	ret

0000008e <H_Led_Tog>:
function to turn the led off if it is on 
and turn it on if it is off
*/
void H_Led_Tog(u8 local_u8_Led)
{
	M_Dio_pinTog(local_u8_Led);
  8e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <M_Dio_pinTog>
  92:	08 95       	ret

00000094 <H_PushButton_Init>:

#include "Pushbutton.h"

void H_PushButton_Init(void)
{
	M_Dio_PinMode(PUSHBUTTON_PIN , INPUT);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	8a e2       	ldi	r24, 0x2A	; 42
  98:	0e 94 6d 00 	call	0xda	; 0xda <M_Dio_PinMode>
  9c:	08 95       	ret

0000009e <H_PushButton_Read>:

//--------------------------------------------------------------------------
u8 H_PushButton_Read(void)
{
	u8 Local_u8_Reading = RELEASED;
	if(M_Dio_PinGet(PUSHBUTTON_PIN) == PRESSED)
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	0e 94 40 01 	call	0x280	; 0x280 <M_Dio_PinGet>
  a4:	81 11       	cpse	r24, r1
  a6:	15 c0       	rjmp	.+42     	; 0xd2 <H_PushButton_Read+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	81 ee       	ldi	r24, 0xE1	; 225
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <H_PushButton_Read+0x10>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <H_PushButton_Read+0x1a>
  b8:	00 00       	nop
	{
		_delay_ms(BLINK_TIME); // to solve the bouncing problem
		if ( M_Dio_PinGet(PUSHBUTTON_PIN) == PRESSED)
  ba:	8a e2       	ldi	r24, 0x2A	; 42
  bc:	0e 94 40 01 	call	0x280	; 0x280 <M_Dio_PinGet>
  c0:	81 11       	cpse	r24, r1
  c2:	09 c0       	rjmp	.+18     	; 0xd6 <H_PushButton_Read+0x38>
		{
			Local_u8_Reading = PRESSED;
			//if the button still pressed hold until released
			while( M_Dio_PinGet(PUSHBUTTON_PIN) == PRESSED);
  c4:	8a e2       	ldi	r24, 0x2A	; 42
  c6:	0e 94 40 01 	call	0x280	; 0x280 <M_Dio_PinGet>
  ca:	88 23       	and	r24, r24
  cc:	d9 f3       	breq	.-10     	; 0xc4 <H_PushButton_Read+0x26>
	if(M_Dio_PinGet(PUSHBUTTON_PIN) == PRESSED)
	{
		_delay_ms(BLINK_TIME); // to solve the bouncing problem
		if ( M_Dio_PinGet(PUSHBUTTON_PIN) == PRESSED)
		{
			Local_u8_Reading = PRESSED;
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret
}

//--------------------------------------------------------------------------
u8 H_PushButton_Read(void)
{
	u8 Local_u8_Reading = RELEASED;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	08 95       	ret
  d6:	81 e0       	ldi	r24, 0x01	; 1
			//if the button still pressed hold until released
			while( M_Dio_PinGet(PUSHBUTTON_PIN) == PRESSED);
		}
	}
	return Local_u8_Reading;
}
  d8:	08 95       	ret

000000da <M_Dio_PinMode>:
			switch(local_u8_Port) // select the port
			{
				case PORT_A:	Setbit(PORTA,Local_u8_Pin);	 break;
				case PORT_B:	Setbit(PORTB,Local_u8_Pin);	 break;
				case PORT_C:	Setbit(PORTC,Local_u8_Pin);	 break;
				case PORT_D:	Setbit(PORTD,Local_u8_Pin);	 break;
  da:	9d ec       	ldi	r25, 0xCD	; 205
  dc:	89 9f       	mul	r24, r25
  de:	91 2d       	mov	r25, r1
  e0:	11 24       	eor	r1, r1
  e2:	29 2f       	mov	r18, r25
  e4:	26 95       	lsr	r18
  e6:	26 95       	lsr	r18
  e8:	26 95       	lsr	r18
  ea:	22 0f       	add	r18, r18
  ec:	32 2f       	mov	r19, r18
  ee:	33 0f       	add	r19, r19
  f0:	33 0f       	add	r19, r19
  f2:	23 0f       	add	r18, r19
  f4:	82 1b       	sub	r24, r18
  f6:	28 2f       	mov	r18, r24
  f8:	96 95       	lsr	r25
  fa:	96 95       	lsr	r25
  fc:	96 95       	lsr	r25
  fe:	66 23       	and	r22, r22
 100:	19 f0       	breq	.+6      	; 0x108 <M_Dio_PinMode+0x2e>
 102:	61 30       	cpi	r22, 0x01	; 1
 104:	e1 f1       	breq	.+120    	; 0x17e <M_Dio_PinMode+0xa4>
 106:	08 95       	ret
 108:	92 30       	cpi	r25, 0x02	; 2
 10a:	a9 f0       	breq	.+42     	; 0x136 <M_Dio_PinMode+0x5c>
 10c:	18 f4       	brcc	.+6      	; 0x114 <M_Dio_PinMode+0x3a>
 10e:	91 30       	cpi	r25, 0x01	; 1
 110:	31 f0       	breq	.+12     	; 0x11e <M_Dio_PinMode+0x44>
 112:	08 95       	ret
 114:	93 30       	cpi	r25, 0x03	; 3
 116:	d9 f0       	breq	.+54     	; 0x14e <M_Dio_PinMode+0x74>
 118:	94 30       	cpi	r25, 0x04	; 4
 11a:	29 f1       	breq	.+74     	; 0x166 <M_Dio_PinMode+0x8c>
 11c:	08 95       	ret
 11e:	3a b3       	in	r19, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <M_Dio_PinMode+0x50>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <M_Dio_PinMode+0x4c>
 12e:	80 95       	com	r24
 130:	83 23       	and	r24, r19
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
 136:	37 b3       	in	r19, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <M_Dio_PinMode+0x68>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <M_Dio_PinMode+0x64>
 146:	80 95       	com	r24
 148:	83 23       	and	r24, r19
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	34 b3       	in	r19, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <M_Dio_PinMode+0x80>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	2a 95       	dec	r18
 15c:	e2 f7       	brpl	.-8      	; 0x156 <M_Dio_PinMode+0x7c>
 15e:	80 95       	com	r24
 160:	83 23       	and	r24, r19
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	31 b3       	in	r19, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <M_Dio_PinMode+0x98>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	2a 95       	dec	r18
 174:	e2 f7       	brpl	.-8      	; 0x16e <M_Dio_PinMode+0x94>
 176:	80 95       	com	r24
 178:	83 23       	and	r24, r19
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
 17e:	92 30       	cpi	r25, 0x02	; 2
 180:	a1 f0       	breq	.+40     	; 0x1aa <M_Dio_PinMode+0xd0>
 182:	18 f4       	brcc	.+6      	; 0x18a <M_Dio_PinMode+0xb0>
 184:	91 30       	cpi	r25, 0x01	; 1
 186:	31 f0       	breq	.+12     	; 0x194 <M_Dio_PinMode+0xba>
 188:	08 95       	ret
 18a:	93 30       	cpi	r25, 0x03	; 3
 18c:	c9 f0       	breq	.+50     	; 0x1c0 <M_Dio_PinMode+0xe6>
 18e:	94 30       	cpi	r25, 0x04	; 4
 190:	11 f1       	breq	.+68     	; 0x1d6 <M_Dio_PinMode+0xfc>
 192:	08 95       	ret
 194:	3a b3       	in	r19, 0x1a	; 26
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <M_Dio_PinMode+0xc6>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	2a 95       	dec	r18
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <M_Dio_PinMode+0xc2>
 1a4:	83 2b       	or	r24, r19
 1a6:	8a bb       	out	0x1a, r24	; 26
 1a8:	08 95       	ret
 1aa:	37 b3       	in	r19, 0x17	; 23
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <M_Dio_PinMode+0xdc>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	2a 95       	dec	r18
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <M_Dio_PinMode+0xd8>
 1ba:	83 2b       	or	r24, r19
 1bc:	87 bb       	out	0x17, r24	; 23
 1be:	08 95       	ret
 1c0:	34 b3       	in	r19, 0x14	; 20
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <M_Dio_PinMode+0xf2>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	2a 95       	dec	r18
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <M_Dio_PinMode+0xee>
 1d0:	83 2b       	or	r24, r19
 1d2:	84 bb       	out	0x14, r24	; 20
 1d4:	08 95       	ret
 1d6:	31 b3       	in	r19, 0x11	; 17
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <M_Dio_PinMode+0x108>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	2a 95       	dec	r18
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <M_Dio_PinMode+0x104>
 1e6:	83 2b       	or	r24, r19
 1e8:	81 bb       	out	0x11, r24	; 17
 1ea:	08 95       	ret

000001ec <M_Dio_pinTog>:
//----------------------------------------------------------------

void M_Dio_pinTog(u8 Local_u8_num)
{
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
 1ec:	9d ec       	ldi	r25, 0xCD	; 205
 1ee:	89 9f       	mul	r24, r25
 1f0:	91 2d       	mov	r25, r1
 1f2:	11 24       	eor	r1, r1
 1f4:	29 2f       	mov	r18, r25
 1f6:	26 95       	lsr	r18
 1f8:	26 95       	lsr	r18
 1fa:	26 95       	lsr	r18
 1fc:	22 0f       	add	r18, r18
 1fe:	32 2f       	mov	r19, r18
 200:	33 0f       	add	r19, r19
 202:	33 0f       	add	r19, r19
 204:	23 0f       	add	r18, r19
 206:	82 1b       	sub	r24, r18
 208:	28 2f       	mov	r18, r24
	// variable to select the port
	u8 local_u8_Port = Local_u8_num /10;
	
	switch(local_u8_Port) // select the port
 20a:	89 2f       	mov	r24, r25
 20c:	86 95       	lsr	r24
 20e:	86 95       	lsr	r24
 210:	86 95       	lsr	r24
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	a1 f0       	breq	.+40     	; 0x23e <M_Dio_pinTog+0x52>
 216:	18 f4       	brcc	.+6      	; 0x21e <M_Dio_pinTog+0x32>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	31 f0       	breq	.+12     	; 0x228 <M_Dio_pinTog+0x3c>
 21c:	08 95       	ret
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	c9 f0       	breq	.+50     	; 0x254 <M_Dio_pinTog+0x68>
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	11 f1       	breq	.+68     	; 0x26a <M_Dio_pinTog+0x7e>
 226:	08 95       	ret
	{
		case PORT_A:	Togbit(PORTA,Local_u8_Pin);	 break;
 228:	3b b3       	in	r19, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <M_Dio_pinTog+0x48>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	2a 95       	dec	r18
 236:	e2 f7       	brpl	.-8      	; 0x230 <M_Dio_pinTog+0x44>
 238:	83 27       	eor	r24, r19
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret
		case PORT_B:	Togbit(PORTB,Local_u8_Pin);	 break;
 23e:	38 b3       	in	r19, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <M_Dio_pinTog+0x5e>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	2a 95       	dec	r18
 24c:	e2 f7       	brpl	.-8      	; 0x246 <M_Dio_pinTog+0x5a>
 24e:	83 27       	eor	r24, r19
 250:	88 bb       	out	0x18, r24	; 24
 252:	08 95       	ret
		case PORT_C:	Togbit(PORTC,Local_u8_Pin);	 break;
 254:	35 b3       	in	r19, 0x15	; 21
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <M_Dio_pinTog+0x74>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	2a 95       	dec	r18
 262:	e2 f7       	brpl	.-8      	; 0x25c <M_Dio_pinTog+0x70>
 264:	83 27       	eor	r24, r19
 266:	85 bb       	out	0x15, r24	; 21
 268:	08 95       	ret
		case PORT_D:	Togbit(PORTD,Local_u8_Pin);	 break;
 26a:	32 b3       	in	r19, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <M_Dio_pinTog+0x8a>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	2a 95       	dec	r18
 278:	e2 f7       	brpl	.-8      	; 0x272 <M_Dio_pinTog+0x86>
 27a:	83 27       	eor	r24, r19
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret

00000280 <M_Dio_PinGet>:
//----------------------------------------------------------------------------

u8   M_Dio_PinGet(u8 Local_u8_num)
{
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
 280:	9d ec       	ldi	r25, 0xCD	; 205
 282:	89 9f       	mul	r24, r25
 284:	91 2d       	mov	r25, r1
 286:	11 24       	eor	r1, r1
 288:	29 2f       	mov	r18, r25
 28a:	26 95       	lsr	r18
 28c:	26 95       	lsr	r18
 28e:	26 95       	lsr	r18
 290:	22 0f       	add	r18, r18
 292:	32 2f       	mov	r19, r18
 294:	33 0f       	add	r19, r19
 296:	33 0f       	add	r19, r19
 298:	23 0f       	add	r18, r19
 29a:	82 1b       	sub	r24, r18
 29c:	28 2f       	mov	r18, r24
	// variable to select the port
	u8 local_u8_Port = Local_u8_num /10;
	
	u8 Local_u8_Reading = 0;
	switch(local_u8_Port) // select the port
 29e:	89 2f       	mov	r24, r25
 2a0:	86 95       	lsr	r24
 2a2:	86 95       	lsr	r24
 2a4:	86 95       	lsr	r24
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	91 f0       	breq	.+36     	; 0x2ce <M_Dio_PinGet+0x4e>
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <M_Dio_PinGet+0x32>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	31 f0       	breq	.+12     	; 0x2bc <M_Dio_PinGet+0x3c>
 2b0:	29 c0       	rjmp	.+82     	; 0x304 <M_Dio_PinGet+0x84>
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	a9 f0       	breq	.+42     	; 0x2e0 <M_Dio_PinGet+0x60>
 2b6:	84 30       	cpi	r24, 0x04	; 4
 2b8:	e1 f0       	breq	.+56     	; 0x2f2 <M_Dio_PinGet+0x72>
 2ba:	24 c0       	rjmp	.+72     	; 0x304 <M_Dio_PinGet+0x84>
	{
		case PORT_A:Local_u8_Reading=Getbit(PINA,Local_u8_Pin);	 break;
 2bc:	89 b3       	in	r24, 0x19	; 25
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <M_Dio_PinGet+0x46>
 2c2:	95 95       	asr	r25
 2c4:	87 95       	ror	r24
 2c6:	2a 95       	dec	r18
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <M_Dio_PinGet+0x42>
 2ca:	81 70       	andi	r24, 0x01	; 1
 2cc:	08 95       	ret
		case PORT_B:Local_u8_Reading=Getbit(PINB,Local_u8_Pin);	 break;
 2ce:	86 b3       	in	r24, 0x16	; 22
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <M_Dio_PinGet+0x58>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	2a 95       	dec	r18
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <M_Dio_PinGet+0x54>
 2dc:	81 70       	andi	r24, 0x01	; 1
 2de:	08 95       	ret
		case PORT_C:Local_u8_Reading=Getbit(PINC,Local_u8_Pin);	 break;
 2e0:	83 b3       	in	r24, 0x13	; 19
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <M_Dio_PinGet+0x6a>
 2e6:	95 95       	asr	r25
 2e8:	87 95       	ror	r24
 2ea:	2a 95       	dec	r18
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <M_Dio_PinGet+0x66>
 2ee:	81 70       	andi	r24, 0x01	; 1
 2f0:	08 95       	ret
		case PORT_D:Local_u8_Reading=Getbit(PIND,Local_u8_Pin);	 break;
 2f2:	80 b3       	in	r24, 0x10	; 16
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <M_Dio_PinGet+0x7c>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	2a 95       	dec	r18
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <M_Dio_PinGet+0x78>
 300:	81 70       	andi	r24, 0x01	; 1
 302:	08 95       	ret
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
	// variable to select the port
	u8 local_u8_Port = Local_u8_num /10;
	
	u8 Local_u8_Reading = 0;
 304:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_D:Local_u8_Reading=Getbit(PIND,Local_u8_Pin);	 break;
		default:													 break;
	}// switch port
	
	return Local_u8_Reading;
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
